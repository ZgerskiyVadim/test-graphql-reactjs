{"version":3,"sources":["logo.svg","services/history.js","constants/index.js","containers/App/App.js","containers/NotFoundPage/NotFoundPage.js","services/gqlRequests.js","containers/Employees/index.js","containers/Employees/Employees.js","services/routes.js","services/serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","history","createBrowserHistory","PATHS","id","path","App","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","props","children","React","Component","NotFoundPage","_React$PureComponent","Header","as","PureComponent","getEmployees","gql","_templateObject","Employees","_this","call","state","showEditMenu","employeeEditValue","firstName","lastName","dateOfBirth","primaryLanguage","languages","handleCloseMenu","bind","assertThisInitialized","handleClickEditIcon","setState","employee","objectSpread","_this2","_this$state","_this$state$employeeE","languageOptions","map","language","text","Modal","open","onClose","Input","placeholder","label","defaultValue","fluid","Dropdown","multiple","selection","options","Button","primary","react_apollo_esm","query","_ref","loading","error","data","Loader","active","Table","celled","Row","HeaderCell","Body","employees","Cell","disabled","Icon","onClick","name","Routes","containers_App_App","react_router","exact","component","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","routes_Routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4d39e86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\nexport default history;\n","export const PATHS = {\n  overview: {\n    id: '',\n    path: '/'\n  }\n};\n","import React from 'react';\nimport logo from '../../logo.svg';\nimport './App.css';\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/*<header className=\"App-header\">*/}\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n        {/*<p>*/}\n        {/*Edit <code>src/App.js</code> and save to reload.*/}\n        {/*</p>*/}\n        {/*<a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">*/}\n        {/*Learn React*/}\n        {/*</a>*/}\n        {/*</header>*/}\n        <main>{this.props.children}</main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nimport './NotFoundPage.css';\n\nexport class NotFoundPage extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"not-found-page\">\n        <Header as=\"h1\">Page not found</Header>\n      </div>\n    );\n  }\n}\n\nexport default NotFoundPage;\n","import { gql } from 'apollo-boost/lib/index';\n\nexport const getEmployees = gql`\n  {\n    employees {\n      id\n      firstName\n      lastName\n      dateOfBirth\n      primaryLanguage\n      languages\n    }\n  }\n`;\n","import Employees from './Employees';\n\nexport default Employees;\n","import React from 'react';\nimport { Table, Dropdown, Loader, Icon, Modal, Input, Button } from 'semantic-ui-react';\nimport { Query } from 'react-apollo';\nimport { getEmployees } from '../../services/gqlRequests';\n\nimport './Employees.css';\n\nexport class Employees extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showEditMenu: false,\n      employeeEditValue: {\n        firstName: '',\n        lastName: '',\n        dateOfBirth: '',\n        primaryLanguage: '',\n        languages: []\n      }\n    };\n\n    this.handleCloseMenu = this.handleCloseMenu.bind(this);\n    this.handleClickEditIcon = this.handleClickEditIcon.bind(this);\n  }\n\n  handleCloseMenu() {\n    this.setState({\n      showEditMenu: null\n    });\n  }\n\n  handleClickEditIcon(employee) {\n    this.setState({\n      showEditMenu: true,\n      employeeEditValue: {\n        ...this.state.employeeEditValue,\n        ...employee\n      }\n    });\n  }\n\n  render() {\n    const {\n      employeeEditValue: { firstName, lastName, dateOfBirth, primaryLanguage, languages },\n      showEditMenu\n    } = this.state;\n    const languageOptions = languages.map(language => ({\n      key: language,\n      text: language,\n      value: language\n    }));\n\n    return (\n      <section className=\"employees-page\">\n        <Modal className=\"employees-page-modal\" open={showEditMenu} onClose={this.handleCloseMenu}>\n          <Modal.Header>Edit employee</Modal.Header>\n          <div className=\"employees-page-modal-container\">\n            <Input placeholder=\"First name\" label=\"First name\" defaultValue={firstName} fluid />\n            <Input placeholder=\"Last name\" label=\"Last name\" defaultValue={lastName} fluid />\n            <Input placeholder=\"Date of birth\" label=\"Date of birth\" defaultValue={dateOfBirth} fluid />\n            <Input placeholder=\"Primary language\" label=\"Primary language\" defaultValue={primaryLanguage} fluid />\n            <Dropdown\n              className=\"employees-page-dropdown-languages\"\n              placeholder=\"Languages\"\n              fluid\n              multiple\n              selection\n              defaultValue={languages}\n              options={languageOptions}\n            />\n            <Button className=\"employees-page-modal-apply\" primary>\n              Apply\n            </Button>\n          </div>\n        </Modal>\n        <Query query={getEmployees}>\n          {({ loading, error, data }) => {\n            if (loading) return <Loader active />;\n            if (error) return <p>Error :(</p>;\n\n            return (\n              <Table celled>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>First name</Table.HeaderCell>\n                    <Table.HeaderCell>Last name</Table.HeaderCell>\n                    <Table.HeaderCell>Date of birth</Table.HeaderCell>\n                    <Table.HeaderCell>Primary language</Table.HeaderCell>\n                    <Table.HeaderCell>Languages</Table.HeaderCell>\n                    <Table.HeaderCell>Settings</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                  {data.employees.map(employee => {\n                    const languageOptions = employee.languages.map(language => ({\n                      text: language,\n                      value: language\n                    }));\n\n                    return (\n                      <Table.Row key={employee.id}>\n                        <Table.Cell>{employee.firstName}</Table.Cell>\n                        <Table.Cell>{employee.lastName}</Table.Cell>\n                        <Table.Cell>{employee.dateOfBirth}</Table.Cell>\n                        <Table.Cell>{employee.primaryLanguage}</Table.Cell>\n                        <Table.Cell>\n                          <Dropdown\n                            className=\"employees-page-dropdown-languages\"\n                            placeholder=\"Languages\"\n                            fluid\n                            multiple\n                            selection\n                            disabled\n                            defaultValue={employee.languages}\n                            options={languageOptions}\n                          />\n                        </Table.Cell>\n                        <Table.Cell>\n                          <Icon onClick={() => this.handleClickEditIcon(employee)} name=\"edit\"></Icon>\n                          <Icon name=\"remove\"></Icon>\n                        </Table.Cell>\n                      </Table.Row>\n                    );\n                  })}\n                </Table.Body>\n              </Table>\n            );\n          }}\n        </Query>\n      </section>\n    );\n  }\n}\n\nexport default Employees;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { PATHS } from '../constants';\nimport { App, NotFoundPage, Employees } from '../containers';\n\nexport const Routes = () => (\n  <App>\n    <Switch>\n      <Route exact path={PATHS.overview.path} component={Employees} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </App>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport history from './services/history';\nimport { Routes } from './services/routes';\nimport { unregister } from './services/serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3001/graphql'\n});\n\nfunction bootstrap() {\n  ReactDOM.render(\n    <ApolloProvider client={client}>\n      <Router history={history}>\n        <Routes />\n      </Router>\n    </ApolloProvider>,\n    document.getElementById('root')\n  );\n}\n\nbootstrap();\nunregister();\n"],"sourceRoot":""}