{"version":3,"sources":["constants/index.js","services/history.js","containers/App/App.js","containers/NotFoundPage/NotFoundPage.js","components/EmployeeModal/EmployeeModal.js","services/gqlRequests.js","containers/Employees/Employees.js","services/routes.js","services/serviceWorker.js","index.js"],"names":["PATHS","id","path","history","createBrowserHistory","App","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","props","children","React","PureComponent","NotFoundPage","Header","as","EmployeeModal","_this","call","handleChangeDropdown","bind","assertThisInitialized","event","data","onChangeForm","target","name","_this$props","showModal","onCloseModal","onSubmitForm","headerText","loading","error","_this$props$employee","employee","firstName","lastName","dateOfBirth","primaryLanguage","languagesOptions","languageOptions","map","language","text","Modal","open","onClose","Loader","active","onSubmit","Input","placeholder","label","defaultValue","onChange","fluid","Dropdown","multiple","selection","options","Button","type","primary","getEmployees","gql","_templateObject","createEmployee","_templateObject2","updateEmployee","_templateObject3","removeEmployee","_templateObject4","Employees","_React$Component","state","isCreateEmployee","showConfirmModal","languages","handleChange","onClickCreateButton","handleConfirmModal","handleCreateEmployee","handleCloseModal","handleCloseConfirmModal","handleClickEditIcon","handleClickRemoveIcon","handleEditEmployee","setState","objectSpread","_event$target","defineProperty","_this2","variables","update","cache","employees","readQuery","query","writeQuery","filter","then","catch","_this3","_this$state$employee","preventDefault","_ref","concat","_this4","_this$state$employee2","_this5","_this$state","onClick","components_EmployeeModal_EmployeeModal","Confirm","onCancel","onConfirm","react_apollo_esm","_ref2","Table","celled","Row","HeaderCell","Body","Cell","disabled","Icon","Component","compose","graphql","Routes","containers_App_App","react_router","exact","component","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","routes_Routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b856b7a.chunk.js","sourcesContent":["export const PATHS = {\n  overview: {\n    id: '',\n    path: '/'\n  }\n};\n\nexport const BACKEND_API = 'http://localhost:3001/graphql';\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\nexport default history;\n","import React from 'react';\nimport './App.css';\n\nexport class App extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\" />\n        <main>{this.props.children}</main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nimport './NotFoundPage.css';\n\nexport class NotFoundPage extends React.PureComponent {\n  render() {\n    return (\n      <div className=\"not-found-page\">\n        <Header as=\"h1\">Page not found</Header>\n      </div>\n    );\n  }\n}\n\nexport default NotFoundPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Dropdown, Input, Modal, Loader } from 'semantic-ui-react';\nimport './EmployeeModal.css';\n\nexport class EmployeeModal extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeDropdown = this.handleChangeDropdown.bind(this);\n  }\n\n  handleChangeDropdown(event, data) {\n    this.props.onChangeForm({\n      target: {\n        name: 'languages',\n        value: data.value\n      }\n    });\n  }\n\n  render() {\n    const {\n      props: {\n        showModal,\n        onCloseModal,\n        onChangeForm,\n        onSubmitForm,\n        headerText,\n        loading,\n        error,\n        employee: { firstName, lastName, dateOfBirth, primaryLanguage, languagesOptions }\n      }\n    } = this;\n\n    const languageOptions = languagesOptions.map(language => ({\n      text: language,\n      value: language\n    }));\n\n    return (\n      <Modal className=\"employee-modal\" open={showModal} onClose={onCloseModal}>\n        <Loader active={loading} />\n        <Modal.Header>{headerText}</Modal.Header>\n        <div className=\"employee-modal-container\">\n          <form onSubmit={onSubmitForm}>\n            <Input\n              name=\"firstName\"\n              placeholder=\"First name\"\n              label=\"First name\"\n              defaultValue={firstName}\n              onChange={onChangeForm}\n              fluid\n            />\n            <Input\n              name=\"lastName\"\n              placeholder=\"Last name\"\n              label=\"Last name\"\n              defaultValue={lastName}\n              onChange={onChangeForm}\n              fluid\n            />\n            <Input\n              name=\"dateOfBirth\"\n              placeholder=\"Date of birth\"\n              label=\"Date of birth\"\n              defaultValue={dateOfBirth}\n              onChange={onChangeForm}\n              fluid\n            />\n            <Input\n              name=\"primaryLanguage\"\n              placeholder=\"Primary language\"\n              label=\"Primary language\"\n              defaultValue={primaryLanguage}\n              onChange={onChangeForm}\n              fluid\n            />\n            <div className=\"ui fluid labeled input\">\n              <div className=\"ui label label\">Languages</div>\n              <Dropdown\n                className=\"employee-modal-dropdown-languages\"\n                placeholder=\"Languages\"\n                fluid\n                multiple\n                selection\n                onChange={this.handleChangeDropdown}\n                defaultValue={languagesOptions}\n                options={languageOptions}\n              />\n            </div>\n\n            <Button className=\"employee-modal-apply\" type=\"submit\" primary>\n              Apply\n            </Button>\n          </form>\n          {error && <p>{error}</p>}\n        </div>\n      </Modal>\n    );\n  }\n}\n\nEmployeeModal.propTypes = {\n  showModal: PropTypes.bool,\n  onCloseModal: PropTypes.func,\n  onChangeForm: PropTypes.func,\n  onSubmitForm: PropTypes.func,\n  headerText: PropTypes.string,\n  employee: PropTypes.shape({\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    dateOfBirth: PropTypes.string,\n    primaryLanguage: PropTypes.string,\n    headerText: PropTypes.string,\n    languages: PropTypes.arrayOf(PropTypes.string),\n    languagesOptions: PropTypes.arrayOf(PropTypes.string)\n  })\n};\n\nexport default EmployeeModal;\n","import { gql } from 'apollo-boost/lib/index';\n\nexport const getEmployees = gql`\n  {\n    employees {\n      id\n      firstName\n      lastName\n      dateOfBirth\n      primaryLanguage\n      languages\n    }\n  }\n`;\n\nexport const createEmployee = gql`\n  mutation createEmployee(\n    $firstName: String!\n    $lastName: String!\n    $dateOfBirth: String!\n    $primaryLanguage: String!\n    $languages: [String]!\n  ) {\n    createEmployee(\n      firstName: $firstName\n      lastName: $lastName\n      dateOfBirth: $dateOfBirth\n      primaryLanguage: $primaryLanguage\n      languages: $languages\n    ) {\n      id\n      firstName\n      lastName\n      dateOfBirth\n      primaryLanguage\n      languages\n    }\n  }\n`;\n\nexport const updateEmployee = gql`\n  mutation updateEmployee(\n    $id: String!\n    $firstName: String!\n    $lastName: String!\n    $dateOfBirth: String!\n    $primaryLanguage: String!\n    $languages: [String]!\n  ) {\n    updateEmployee(\n      id: $id\n      firstName: $firstName\n      lastName: $lastName\n      dateOfBirth: $dateOfBirth\n      primaryLanguage: $primaryLanguage\n      languages: $languages\n    ) {\n      id\n      firstName\n      lastName\n      dateOfBirth\n      primaryLanguage\n      languages\n    }\n  }\n`;\n\nexport const removeEmployee = gql`\n  mutation removeEmployee($id: String!) {\n    removeEmployee(id: $id) {\n      id\n      firstName\n      lastName\n      dateOfBirth\n      primaryLanguage\n      languages\n    }\n  }\n`;\n","import React from 'react';\nimport { Query, graphql, compose } from 'react-apollo';\nimport { Confirm, Table, Dropdown, Loader, Icon, Button } from 'semantic-ui-react';\n\nimport { EmployeeModal } from '../../components';\nimport { getEmployees, createEmployee, updateEmployee, removeEmployee } from '../../services/gqlRequests';\n\nimport './Employees.css';\n\nexport class Employees extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isCreateEmployee: false,\n      showModal: false,\n      showConfirmModal: false,\n      loading: true,\n      error: null,\n      employee: {\n        id: '',\n        firstName: '',\n        lastName: '',\n        dateOfBirth: '',\n        primaryLanguage: '',\n        languages: ['English', 'German'],\n        languagesOptions: ['English', 'German']\n      }\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onClickCreateButton = this.onClickCreateButton.bind(this);\n    this.handleConfirmModal = this.handleConfirmModal.bind(this);\n    this.handleCreateEmployee = this.handleCreateEmployee.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n    this.handleCloseConfirmModal = this.handleCloseConfirmModal.bind(this);\n    this.handleClickEditIcon = this.handleClickEditIcon.bind(this);\n    this.handleClickRemoveIcon = this.handleClickRemoveIcon.bind(this);\n    this.handleEditEmployee = this.handleEditEmployee.bind(this);\n  }\n\n  handleCloseModal() {\n    this.setState({\n      showModal: false,\n      isCreateEmployee: false\n    });\n  }\n\n  handleCloseConfirmModal() {\n    this.setState({\n      showConfirmModal: false\n    });\n  }\n\n  onClickCreateButton() {\n    this.setState({\n      showModal: true,\n      isCreateEmployee: true\n    });\n  }\n\n  handleClickEditIcon(employee) {\n    this.setState({\n      showModal: true,\n      employee: {\n        ...this.state.employee,\n        ...employee,\n        languagesOptions: employee.languages\n      }\n    });\n  }\n\n  handleClickRemoveIcon(employee) {\n    this.setState({\n      showConfirmModal: true,\n      employee: {\n        ...this.state.employee,\n        ...employee,\n        languagesOptions: employee.languages\n      }\n    });\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n\n    this.setState({\n      employee: {\n        ...this.state.employee,\n        [name]: value\n      }\n    });\n  }\n\n  handleConfirmModal() {\n    const {\n      employee: { id }\n    } = this.state;\n\n    this.setState({\n      loading: true\n    });\n    this.props\n      .removeEmployee({\n        variables: {\n          id\n        },\n        update: cache => {\n          const { employees } = cache.readQuery({ query: getEmployees });\n          cache.writeQuery({\n            query: getEmployees,\n            data: { employees: employees.filter(employee => employee.id !== id) }\n          });\n        }\n      })\n      .then(() => {\n        this.setState({\n          loading: false,\n          showConfirmModal: false\n        });\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n          error: 'Some error'\n        });\n      });\n  }\n\n  handleCreateEmployee(event) {\n    const {\n      employee: { firstName, lastName, dateOfBirth, primaryLanguage, languages }\n    } = this.state;\n    event.preventDefault();\n\n    this.setState({\n      loading: true\n    });\n\n    this.props\n      .createEmployee({\n        variables: {\n          firstName,\n          lastName,\n          dateOfBirth,\n          primaryLanguage,\n          languages\n        },\n        update: (cache, { data: { createEmployee } }) => {\n          const { employees } = cache.readQuery({ query: getEmployees });\n          cache.writeQuery({\n            query: getEmployees,\n            data: { employees: employees.concat([createEmployee]) }\n          });\n        }\n      })\n      .then(() => {\n        this.setState({\n          loading: false,\n          showModal: false,\n          isCreateEmployee: false,\n          employee: {\n            id: '',\n            firstName: '',\n            lastName: '',\n            dateOfBirth: '',\n            primaryLanguage: '',\n            languages: ['English', 'German'],\n            languagesOptions: ['English', 'German']\n          }\n        });\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n          error: 'Some error'\n        });\n      });\n  }\n\n  handleEditEmployee(event) {\n    const {\n      employee: { id, firstName, lastName, dateOfBirth, primaryLanguage, languages }\n    } = this.state;\n    event.preventDefault();\n\n    this.setState({\n      loading: true\n    });\n\n    this.props\n      .updateEmployee({\n        variables: {\n          id,\n          firstName,\n          lastName,\n          dateOfBirth,\n          primaryLanguage,\n          languages\n        }\n      })\n      .then(() => {\n        this.setState({\n          loading: false,\n          showModal: false\n        });\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n          error: 'Some error'\n        });\n      });\n  }\n\n  render() {\n    const { employee, isCreateEmployee, showModal, showConfirmModal, loading, error } = this.state;\n\n    return (\n      <div className=\"employees-page\">\n        <Button className=\"employees-page-create-button\" onClick={this.onClickCreateButton}>Create</Button>\n        <EmployeeModal\n          showModal={showModal}\n          headerText=\"Edit employee\"\n          employee={employee}\n          loading={loading}\n          error={error}\n          onChangeForm={this.handleChange}\n          onSubmitForm={isCreateEmployee ? this.handleCreateEmployee : this.handleEditEmployee}\n          onCloseModal={this.handleCloseModal}\n        />\n        <Confirm open={showConfirmModal} onCancel={this.handleCloseConfirmModal} onConfirm={this.handleConfirmModal} />\n        <Query query={getEmployees}>\n          {({ loading, error, data }) => {\n            if (loading) return <Loader active />;\n            if (error) return <p>Error :(</p>;\n\n            return (\n              <Table celled>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>First name</Table.HeaderCell>\n                    <Table.HeaderCell>Last name</Table.HeaderCell>\n                    <Table.HeaderCell>Date of birth</Table.HeaderCell>\n                    <Table.HeaderCell>Primary language</Table.HeaderCell>\n                    <Table.HeaderCell>Languages</Table.HeaderCell>\n                    <Table.HeaderCell>Settings</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                  {data.employees.map(employee => {\n                    const languageOptions = employee.languages.map(language => ({\n                      text: language,\n                      value: language\n                    }));\n\n                    return (\n                      <Table.Row key={employee.id}>\n                        <Table.Cell>{employee.firstName}</Table.Cell>\n                        <Table.Cell>{employee.lastName}</Table.Cell>\n                        <Table.Cell>{employee.dateOfBirth}</Table.Cell>\n                        <Table.Cell>{employee.primaryLanguage}</Table.Cell>\n                        <Table.Cell>\n                          <Dropdown\n                            className=\"employees-page-dropdown-languages\"\n                            placeholder=\"Languages\"\n                            fluid\n                            multiple\n                            selection\n                            disabled\n                            defaultValue={employee.languages}\n                            options={languageOptions}\n                          />\n                        </Table.Cell>\n                        <Table.Cell>\n                          <Icon onClick={() => this.handleClickEditIcon(employee)} name=\"edit\"></Icon>\n                          <Icon onClick={() => this.handleClickRemoveIcon(employee)} name=\"remove\"></Icon>\n                        </Table.Cell>\n                      </Table.Row>\n                    );\n                  })}\n                </Table.Body>\n              </Table>\n            );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  graphql(updateEmployee, { name: 'updateEmployee' }),\n  graphql(removeEmployee, { name: 'removeEmployee' }),\n  graphql(createEmployee, { name: 'createEmployee' })\n)(Employees);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { PATHS } from '../constants';\nimport { App, NotFoundPage, Employees } from '../containers';\n\nexport const Routes = () => (\n  <App>\n    <Switch>\n      <Route exact path={PATHS.overview.path} component={Employees} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  </App>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\nimport { BACKEND_API } from './constants';\nimport history from './services/history';\nimport { Routes } from './services/routes';\nimport { unregister } from './services/serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nconst client = new ApolloClient({\n  uri: BACKEND_API\n});\n\nfunction bootstrap() {\n  ReactDOM.render(\n    <ApolloProvider client={client}>\n      <Router history={history}>\n        <Routes />\n      </Router>\n    </ApolloProvider>,\n    document.getElementById('root')\n  );\n}\n\nbootstrap();\nunregister();\n"],"sourceRoot":""}